{
  "name": "barracks-sdk",
  "version": "0.0.2",
  "build": 0,
  "description": "Barracks SDK node module",
  "main": "src/index.js",
  "scripts": {
    "test": "mocha ./tests/test.js"
  },
  "contributors": [
    {
      "name": "Brice Argenson",
      "email": "brice@barracks.io"
    },
    {
      "name": "GrÃ©goire Weber",
      "email": "gregoire@barracks.io"
    },
    {
      "name": "Paul Aigeperse",
      "email": "paul@barracks.io"
    },
    {
      "name": "Pierre-Olivier Dybman",
      "email": "pierre-olivier@barracks.io"
    },
    {
      "name": "Simon Guerout",
      "email": "simon@barracks.io"
    }
  ],
  "devDependencies": {
    "chai": "~1.10.0",
    "chai-fs": "^0.1.0",
    "chai-http": "~1.0.0",
    "debug": "^2.2.0",
    "grunt": "~0.4.5",
    "grunt-contrib-jshint": "^0.11.3",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-mocha-test": "~0.12.7",
    "mocha": "~2.3.4",
    "nock": "^8.0.0",
    "proxyquire": "^1.7.10",
    "request-debug": "^0.2.0"
  },
  "dependencies": {
    "es6-promise": "^4.0.5",
    "md5-file": "^3.1.1",
    "request": "^2.74.0"
  },
  "engines": {
    "node": ">=0.10 <7.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/barracksiot/javascript-client"
  },
  "readme": "![Barracks logo](https://barracks.io/wp-content/uploads/2016/09/barracks_logo_green.png)\n\n# Barracks SDK for JavaScript\nThe JavaScript SDK to interact with the [Barracks](https://barracks.io/) API\n\n## Installation\n\n```bash\n$ npm install barracks-sdk\n```\n\n## Usage\n\n### Create a Barracks SDK instance:\n```js\nvar Barracks = require('barracks-sdk');\n\nvar barracks = new Barracks({\n  apiKey: 'Your user API key',\n  unitId: 'The unique device identifier'\n});\n```\nYour user api key you can be found on the Account page of the [Barracks application](https://app.barracks.io/).\n\n\n### Check for an update:\n```js\nbarracks.checkUpdate(currentDeviceVersion, customClientData).then(function (update) {\n  if (update) {\n    // Do something with the update\n  } else {\n    // Do something when no updates are available\n  }\n}).catch(function (err) {\n  // Do something with the error (See error handling section)\n});\n```\n\n\n### Check for an update and download it:\n```js\nbarracks.checkUpdate(currentDeviceVersion, customClientData).then(function (update) {\n  if (update) {\n    return update.download();\n  }\n  return Promise.resolve();\n}).then(function (file) {\n  if (file) {\n    // Do something with the file\n  }\n}).catch(function (err) {\n  // Do something with the error (See error handling section)\n});\n```\n\n\n### Check for an update and download it without chaining the Promises:\n```js\nbarracks.checkUpdate(currentDeviceVersion, customClientData).then(function (update) {\n  if (update) {\n    update.download().then(function (file) {\n      // Do something with the file\n    }).catch(function (err) {\n      // Do something with the download error\n    });\n  }\n}).catch(function (err) {\n  // Do something with the error (See error handling section)\n});\n```\n\n\n### Check for an update and download it with a single function:\n```js\nbarracks.checkUpdateAndDownload(currentDeviceVersion, customClientData).then(function (file) {\n  // Do something with the file\n}).catch(function (err) {\n  // Do something with the error (See error handling section)\n});\n```\n\n\n## Error Handling\n\nAll errors returned by the SDK follow the same object format:\n```js\n{\n  type: 'ERROR_TYPE',\n  message: 'Details about the error'\n}\n```\n\nError type can be one of the the following:\n\n* `REQUEST_FAILED`, is returned by both `Barracks.checkUpdate()` and `Barracks.checkUpdateAndDownload()` methods if the check update request fails. The error object also contains one additional property `requestError` that is the `Error` object returned by the [request](https://www.npmjs.com/package/request) library.\n* `UNEXPECTED_SERVER_RESPONSE`, is returned by both `Barracks.checkUpdate()` and `Barracks.checkUpdateAndDownload()` methods if the HTTP response code is not `200` (a new update is available) or `204` (no update available).\n* `DOWNLOAD_FAILED`, is returned by both `Update.download()` and `Barracks.checkUpdateAndDownload()` methods if the download of an update package fails.\n* `DELETE_FILE_FAILED`, is returned by both `Update.download()` and `Barracks.checkUpdateAndDownload()` methods if the SDK fail to delete an update package that did not pass the MD5 checksum verification.\n* `CHECKSUM_VERIFICATION_FAILED`, is returned by both `Update.download()` and `Barracks.checkUpdateAndDownload()` methods if the MD5 checksum verification of the update package downloaded fails.\n* `MD5_HASH_CREATION_FAILED`, is returned by both `Update.download()` and `Barracks.checkUpdateAndDownload()` methods if the SDK is not able to generate the MD5 checksum of the update package downloaded.\n\n## Docs & Community\n\n* [Website and Documentation](https://barracks.io/)\n* [Github Organization](https://github.com/barracksiot) for other official SDKs\n\n## License\n\n  [Apache License, Version 2.0](LICENSE)",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/barracksiot/javascript-client/issues"
  },
  "homepage": "https://github.com/barracksiot/javascript-client",
  "_id": "barracks-sdk@0.0.2",
  "_from": "barracks-sdk@0.0.2"
}
